"""
Django settings for Test_site project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
import sys
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', False)

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'ridingclubs.herokuapp.com'
]


DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

PROJECT_APPS = [
    'riding_sport_clubs.web_clubs',
    'riding_sport_clubs.web_accounts',
]

INSTALLED_APPS = DJANGO_APPS + PROJECT_APPS


MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'riding_sport_clubs.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'riding_sport_clubs.wsgi.application'

DATAB = os.getenv('DB')
if DATAB == 'Development':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_DEV_NAME', 'db_dev_name'),
            'USER': os.getenv('DB_DEV_USER', 'db_dev_user'),
            'PASSWORD': os.getenv('DB_DEV_PASS', 'db_dev_pass'),
            'HOST': os.getenv('DB_DEV_HOST', 'localhost'),
            'PORT': os.getenv('DB_DEV_PORT', '5432'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_PRODUCTION_NAME'),
            'USER': os.getenv('DB_PRODUCTION_USER'),
            'PASSWORD': os.getenv('DB_PRODUCTION_PASS'),
            'HOST': os.getenv('DB_PRODUCTION_HOST'),
            'PORT': os.getenv('DB_PRODUCTION_PORT'),
        }
    }

if 'test' in sys.argv:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_DEV_NAME'),
            'USER': os.getenv('DB_DEV_USER'),
            'PASSWORD': os.getenv('DB_DEV_PASS'),
            'HOST': os.getenv('DB_DEV_HOST'),
            'PORT': os.getenv('DB_DEV_PORT'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_ROOT = BASE_DIR / 'static_files'
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static'
]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media_files'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    # 'version': 1,
    # 'disable_existing_loggers': False,
    # 'formatters': {
    #     'verbose': {
    #         'format': '{asctime} {name} [{levelname}] {module} {process:d} {thread:d} {message}',
    #         'style': '{',
    #     },
    # },
    # 'handlers': {
    #     'console': {
    #         'class': 'logging.StreamHandler',
    #         'level': 'DEBUG',
    #     },
    #     'file': {
    #         'class': 'logging.FileHandler',
    #         'filename': BASE_DIR / 'logs/logs.txt',
    #         'level': 'INFO',
    #         'formatter': 'verbose',
    #     },
    # },
    # 'root': {
    #     'handlers': ['file'],
    #     'level': 'INFO',
    # },
    # 'loggers': {
    #     'django.bg.backends': {
    #         'level': 'INFO',
    #         'handlers': ['file'],
    #     },
    # },
}

AUTH_USER_MODEL = 'web_accounts.SiteUser'
